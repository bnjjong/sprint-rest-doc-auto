plugins {
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    // https://jinseobbae.github.io/spring/2022/01/26/gradle-asciidoc-error.html
    id 'org.asciidoctor.jvm.convert' version "3.3.2"
    id 'java'
}

group = 'io.jjong'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExtensions
    jsondoclet
}
ext {
    snippetsDir = file("$buildDir/generated-snippets") // snippet 이 생성될 디렉토리 지정
    javadocJsonDir = file("$buildDir/generated-javadoc-json") // javadoc-json 이 생성될 디렉토리 지정
}

repositories {
    mavenCentral()
}



dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'

    // auto restdoc
    jsondoclet 'capital.scalable:spring-auto-restdocs-json-doclet-jdk9:2.0.11'
    testImplementation 'capital.scalable:spring-auto-restdocs-core:2.0.11'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

// Java Source 코드에서 Javadoc 을 읽고, json 파일로 반환
task jsonDoclet(type: Javadoc, dependsOn: compileJava) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = javadocJsonDir
    options.docletpath = configurations.jsondoclet.files.asType(List)
    options.doclet = 'capital.scalable.restdocs.jsondoclet.ExtractDocumentationAsJsonDoclet'
    options.memberLevel = JavadocMemberLevel.PACKAGE
}

test {
    systemProperty 'org.springframework.restdocs.outputDir', snippetsDir
    systemProperty 'org.springframework.restdocs.javadocJsonDir', javadocJsonDir

    dependsOn jsonDoclet
    useJUnitPlatform()
    finalizedBy 'asciidoctor'
}

// src/docs/asciidoc/*.adoc 파일을 build/docs/asciidoc에 *.html 파일로 변환
asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
//    configurations 'asciidoctorExtensions' // 이부분!
    baseDirFollowsSourceFile()
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}") {
        into 'BOOT-INF/classes/static/docs'
    }
}

// asccidoctor 작업 이후 "build/docs/asciidoc" 에 생성된 HTML 파일을 static/docs 로 copy -> 어플리케이션 실행 후 localhost:8080/docs/~~.html 경로로 접근 가능
// 어플리케이션 실행 전에 이 Task 만 따로 수행 필요.
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

// assemble을 copyDocument에 의존하게 하여, assemble보다 copyDocument가 먼저 실행되도록 함
// jar 파일은 copyDocument가 끝나야 생성이 됨
assemble {
    dependsOn copyDocument
}

jar {
    enabled = false
}

tasks.named("processResources") { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }